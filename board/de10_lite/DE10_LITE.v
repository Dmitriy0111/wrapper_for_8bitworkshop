
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE(

    //////////// CLOCK //////////
    input                       ADC_CLK_10,
    input                       MAX10_CLK1_50,
    input                       MAX10_CLK2_50,

    //////////// SDRAM //////////
    output          [12:0]      DRAM_ADDR,
    output           [1:0]      DRAM_BA,
    output                      DRAM_CAS_N,
    output                      DRAM_CKE,
    output                      DRAM_CLK,
    output                      DRAM_CS_N,
    inout           [15:0]      DRAM_DQ,
    output                      DRAM_LDQM,
    output                      DRAM_RAS_N,
    output                      DRAM_UDQM,
    output                      DRAM_WE_N,

    //////////// SEG7 //////////
    output           [7:0]      HEX0,
    output           [7:0]      HEX1,
    output           [7:0]      HEX2,
    output           [7:0]      HEX3,
    output           [7:0]      HEX4,
    output           [7:0]      HEX5,

    //////////// KEY //////////
    input            [1:0]      KEY,

    //////////// LED //////////
    output           [9:0]      LEDR,

    //////////// SW //////////
    input            [9:0]      SW,

    //////////// VGA //////////
    output           [3:0]      VGA_B,
    output           [3:0]      VGA_G,
    output                      VGA_HS,
    output           [3:0]      VGA_R,
    output                      VGA_VS,

    //////////// Accelerometer //////////
    output                      GSENSOR_CS_N,
    input            [2:1]      GSENSOR_INT,
    output                      GSENSOR_SCLK,
    inout                       GSENSOR_SDI,
    inout                       GSENSOR_SDO,

    //////////// Arduino //////////
    inout           [15:0]      ARDUINO_IO,
    inout                       ARDUINO_RESET_N,

    //////////// GPIO, GPIO connect to GPIO Default //////////
    inout           [35:0]      GPIO
);

//=======================================================
//  REG/WIRE declarations
//=======================================================

    // redefine parameters horizontal sync
    defparam test_hvsync_top_0.hvsync_gen.H_DISPLAY = 640;
    defparam test_hvsync_top_0.hvsync_gen.H_BACK    = 48;
    defparam test_hvsync_top_0.hvsync_gen.H_FRONT   = 16;
    defparam test_hvsync_top_0.hvsync_gen.H_SYNC    = 96;
    // redefine parameters vertical sync
    defparam test_hvsync_top_0.hvsync_gen.V_DISPLAY = 480;
    defparam test_hvsync_top_0.hvsync_gen.V_TOP     = 10;
    defparam test_hvsync_top_0.hvsync_gen.V_BOTTOM  = 33;
    defparam test_hvsync_top_0.hvsync_gen.V_SYNC    = 2;

    wire    [0 : 0]     clk;
    wire    [0 : 0]     reset; 
    wire    [0 : 0]     hsync;
    wire    [0 : 0]     vsync; 
    wire    [2 : 0]     rgb;
    reg     [0 : 0]     clk_div;

    assign reset  = ~ KEY[0];
    assign clk    = clk_div;
    assign VGA_HS = hsync;
    assign VGA_VS = vsync;
    assign {VGA_R,VGA_G,VGA_B} = { { 4 { rgb[2] } } , { 4 { rgb[1] } } , { 4 { rgb[0] } } };

    always @(posedge MAX10_CLK1_50, posedge reset)
        if( reset )
            clk_div <= 1'b0;
        else
            clk_div <= ~ clk_div;

//=======================================================
//  Structural coding
//=======================================================

    test_hvsync_top
    test_hvsync_top_0
    (
        .clk    ( clk   ), 
        .reset  ( reset ), 
        .hsync  ( hsync ), 
        .vsync  ( vsync ), 
        .rgb    ( rgb   )
    );

endmodule
